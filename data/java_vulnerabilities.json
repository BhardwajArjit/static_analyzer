[
    {
        "code": "public class HardcodedCredentials { public static void main(String[] args) { String username = \"admin\"; String password = \"password123\"; if (authenticate(username, password)) { System.out.println(\"Authentication successful.\"); } else { System.out.println(\"Authentication failed.\"); } } private static boolean authenticate(String username, String password) { return \"admin\".equals(username) && \"password123\".equals(password); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "public class HardcodedCredentials2 { public static void main(String[] args) { String apiKey = \"API_KEY_123456\"; System.out.println(apiKey); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "public class DBConnection { private static final String DB_PASSWORD = \"db_secret_pass\"; public void connect() { String password = DB_PASSWORD; System.out.println(\"Connecting to DB with password: \" + password); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "public class FTPConnection { private static final String FTP_USERNAME = \"ftp_user\"; private static final String FTP_PASSWORD = \"ftp_password\"; public void connect() { System.out.println(FTP_USERNAME + \":\" + FTP_PASSWORD); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "public class SecureKeyTest { public static void main(String[] args) { String secretKey = \"supersecretkey\"; System.out.println(secretKey); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "public class CredentialCheck { private static final String SERVICE_USER = \"serviceuser\"; private static final String SERVICE_PASS = \"mypassword\"; public boolean check(String user, String pass) { return SERVICE_USER.equals(user) && SERVICE_PASS.equals(pass); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "import java.io.FileWriter; import java.io.IOException; public class InsecureDataStorage { public static void main(String[] args) { String sensitiveData = \"Sensitive Information\"; try (FileWriter writer = new FileWriter(\"sensitive_data.txt\")) { writer.write(sensitiveData); } catch (IOException e) { e.printStackTrace(); } } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "import java.io.FileOutputStream; public class InsecureStorageExample { public static void main(String[] args) { String secretData = \"top_secret_data\"; try (FileOutputStream fos = new FileOutputStream(\"secret_data.txt\")) { fos.write(secretData.getBytes()); } catch (Exception e) { e.printStackTrace(); } } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "import java.io.BufferedWriter; import java.io.FileWriter; public class StoreDataInsecurely { public static void main(String[] args) { String confidentialData = \"confidential_info\"; try (BufferedWriter writer = new BufferedWriter(new FileWriter(\"confidential.txt\"))) { writer.write(confidentialData); } catch (Exception e) { e.printStackTrace(); } } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "import java.io.FileWriter; import java.io.IOException; public class SaveSensitiveInfo { public static void main(String[] args) { String sensitiveInfo = \"SensitiveUserInfo\"; try (FileWriter writer = new FileWriter(\"userinfo.txt\")) { writer.write(sensitiveInfo); } catch (IOException e) { e.printStackTrace(); } } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "import java.io.File; import java.io.PrintWriter; public class InsecureDataLogger { public static void main(String[] args) { File file = new File(\"data.txt\"); try (PrintWriter pw = new PrintWriter(file)) { pw.println(\"Sensitive data logged\"); } catch (Exception e) { e.printStackTrace(); } } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "import java.io.File; import java.io.FileWriter; public class UnencryptedStorage { public static void main(String[] args) { File file = new File(\"unencrypted_file.txt\"); try (FileWriter writer = new FileWriter(file)) { writer.write(\"unencrypted_data\"); } catch (Exception e) { e.printStackTrace(); } } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.SQLException; public class SQLInjectionExample { public static void main(String[] args) { String userInput = \"1 OR 1=1\"; try { Connection connection = DriverManager.getConnection(\"jdbc:your_database_url\", \"username\", \"password\"); String query = \"SELECT * FROM users WHERE id = \" + userInput; PreparedStatement statement = connection.prepareStatement(query); statement.executeQuery(); } catch (SQLException e) { e.printStackTrace(); } } }",
        "label": "sql_injection"
    },
    {
        "code": "import java.sql.Connection; import java.sql.Statement; public class SQLInjectionVulnerable { public static void query(String id) { try { Connection conn = DriverManager.getConnection(\"db_url\", \"user\", \"pass\"); Statement stmt = conn.createStatement(); String sql = \"SELECT * FROM users WHERE id = \" + id; stmt.executeQuery(sql); } catch (Exception e) { e.printStackTrace(); } } }",
        "label": "sql_injection"
    },
    {
        "code": "import java.sql.Connection; import java.sql.Statement; public class SQLQueryInjection { public static void execute(String userInput) { try { Connection connection = DriverManager.getConnection(\"url\", \"user\", \"pass\"); String query = \"SELECT * FROM accounts WHERE accountID = \" + userInput; Statement stmt = connection.createStatement(); stmt.executeQuery(query); } catch (SQLException e) { e.printStackTrace(); } } }",
        "label": "sql_injection"
    },
    {
        "code": "import java.sql.Statement; public class UserLogin { public static void login(String username) { try { Statement stmt = connection.createStatement(); String query = \"SELECT * FROM logins WHERE username = '\" + username + \"'\"; stmt.executeQuery(query); } catch (SQLException e) { e.printStackTrace(); } } }",
        "label": "sql_injection"
    },
    {
        "code": "import java.sql.Statement; public class InjectionDemo { public static void query(String input) { try { Statement stmt = connection.createStatement(); String sql = \"SELECT * FROM inventory WHERE product_id = \" + input; stmt.execute(sql); } catch (SQLException e) { e.printStackTrace(); } } }",
        "label": "sql_injection"
    },
    {
        "code": "import java.sql.Statement; public class SQLInjectionRisk { public static void main(String[] args) { String userInput = \"1001 OR 1=1\"; String query = \"SELECT * FROM orders WHERE order_id = \" + userInput; stmt.executeQuery(query); } }",
        "label": "sql_injection"
    },
    {
        "code": "import java.util.Random; public class InsecureRandom { public static void main(String[] args) { Random random = new Random(); int randomNumber = random.nextInt(1000); System.out.println(\"Random number: \" + randomNumber); } }",
        "label": "insecure_random"
    },
    {
        "code": "import java.util.Random; public class UnsecureRandomNumberGenerator { public static void main(String[] args) { Random rand = new Random(); System.out.println(rand.nextInt()); } }",
        "label": "insecure_random"
    },
    {
        "code": "import java.util.Random; public class UnpredictableRandom { public static void main(String[] args) { Random random = new Random(); System.out.println(\"Random value: \" + random.nextDouble()); } }",
        "label": "insecure_random"
    },
    {
        "code": "import java.util.Random; public class WeakRandomGeneration { public static void main(String[] args) { Random rand = new Random(); int value = rand.nextInt(100); System.out.println(\"Generated number: \" + value); } }",
        "label": "insecure_random"
    },
    {
        "code": "import java.util.Random; public class RandomDemo { public static void main(String[] args) { Random random = new Random(); System.out.println(\"Unsecure random number: \" + random.nextLong()); } }",
        "label": "insecure_random"
    },
    {
        "code": "import java.util.Random; public class RandomValue { public static void main(String[] args) { Random rand = new Random(); System.out.println(rand.nextFloat()); } }",
        "label": "insecure_random"
    },
    {
        "code": "import java.io.File; public class InsecureFilePermissions { public static void main(String[] args) { File file = new File(\"insecure_file.txt\"); try { if (file.createNewFile()) { file.setReadable(true, false); file.setWritable(true, false); file.setExecutable(true, false); } } catch (IOException e) { e.printStackTrace(); } } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "import java.io.File; public class UnsafeFilePermissions { public static void main(String[] args) { File file = new File(\"unsafe_file.txt\"); file.setReadable(true); file.setWritable(true); file.setExecutable(true); } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "import java.io.File; public class IncorrectFilePermissions { public static void main(String[] args) { File file = new File(\"wrong_permissions.txt\"); file.setReadable(true, false); file.setWritable(true, false); } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "import java.io.File; public class BadFilePermissions { public static void main(String[] args) { File file = new File(\"file.txt\"); file.setReadable(true); file.setWritable(true); file.setExecutable(true); } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "import java.io.File; public class FilePermissionExample { public static void main(String[] args) { File file = new File(\"file.txt\"); file.setReadable(true); file.setWritable(true); } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "import java.io.File; public class PermissionsIssue { public static void main(String[] args) { File file = new File(\"permissions.txt\"); file.setExecutable(true); } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "public class NoVulnerabilityExample { public static void main(String[] args) { int x = 5; int y = 10; System.out.println(x + y); } }",
        "label": "no_vulnerability"
    },
    {
        "code": "public class NoVulnCase { public static void main(String[] args) { String message = \"Hello, World!\"; System.out.println(message); } }",
        "label": "no_vulnerability"
    },
    {
        "code": "public class SimpleProgram { public static void main(String[] args) { for (int i = 0; i < 10; i++) { System.out.println(\"Counting: \" + i); } } }",
        "label": "no_vulnerability"
    },
    {
        "code": "public class SafeCode { public static void main(String[] args) { int[] arr = {1, 2, 3, 4}; for (int i : arr) { System.out.println(i); } } }",
        "label": "no_vulnerability"
    },
    {
        "code": "public class BasicExample { public static void main(String[] args) { String str = \"Sample\"; int length = str.length(); System.out.println(length); } }",
        "label": "no_vulnerability"
    },
    {
        "code": "public class NoIssuesCode { public static void main(String[] args) { double result = Math.sqrt(144); System.out.println(result); } }",
        "label": "no_vulnerability"
    },
    {
        "code": "public class MemoryLeakExample { private static List<String> data = new ArrayList<>(); public static void main(String[] args) { for (int i = 0; i < 1000000; i++) { data.add(\"Memory Leak\"); } } }",
        "label": "memory_leaks"
    },
    {
        "code": "import java.util.ArrayList; import java.util.List; public class MemoryLeak { List<String> list = new ArrayList<>(); public void addData() { while (true) { list.add(\"leak\"); } } }",
        "label": "memory_leaks"
    },
    {
        "code": "public class MemoryLeak2 { List<Object> bigList = new ArrayList<>(); public void process() { for (int i = 0; i < Integer.MAX_VALUE; i++) { bigList.add(new byte[1024 * 1024]); } } }",
        "label": "memory_leaks"
    },
    {
        "code": "import java.util.List; import java.util.ArrayList; public class LeakDemo { public static void main(String[] args) { List<byte[]> leak = new ArrayList<>(); for (int i = 0; i < 1000000; i++) { leak.add(new byte[1024]); } } }",
        "label": "memory_leaks"
    },
    {
        "code": "import java.util.HashMap; import java.util.Map; public class MemoryLeakWithHashMap { private static Map<Integer, String> cache = new HashMap<>(); public static void main(String[] args) { for (int i = 0; i < 1000000; i++) { cache.put(i, \"leak\"); } } }",
        "label": "memory_leaks"
    },
    {
        "code": "import java.util.ArrayList; import java.util.List; public class MemoryLeakSimulation { List<Object> memoryHog = new ArrayList<>(); public void run() { while (true) { memoryHog.add(new Object()); } } }",
        "label": "memory_leaks"
    },
    {
        "code": "public class DataObfuscation { public static void main(String[] args) { String sensitiveData = \"Sensitive Info\"; System.out.println(sensitiveData); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "public class UnobfuscatedData { public static void main(String[] args) { String password = \"mypassword\"; System.out.println(password); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "public class SensitiveInfoExample { public static void main(String[] args) { String secret = \"12345\"; System.out.println(secret); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "public class UnsecuredInformation { public static void main(String[] args) { String privateKey = \"PRIVATE_KEY\"; System.out.println(privateKey); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "public class ExposureOfSensitiveData { public static void main(String[] args) { String creditCard = \"4111111111111111\"; System.out.println(creditCard); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "public class LogSensitiveData { public static void main(String[] args) { String sensitiveData = \"Confidential Information\"; System.out.println(sensitiveData); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; public class NoHashing { public static void main(String[] args) { String password = \"mypassword\"; System.out.println(password); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "public class NoHashPassword { public static void main(String[] args) { String pass = \"superSecret\"; System.out.println(pass); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "public class UnhashedKey { public static void main(String[] args) { String key = \"api_key_123\"; System.out.println(key); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "public class HashingExample { public static void main(String[] args) { String key = \"important_key\"; System.out.println(key); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "public class KeyStorage { public static void main(String[] args) { String privateKey = \"private_key_123\"; System.out.println(privateKey); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "public class UnencryptedKey { public static void main(String[] args) { String encryptionKey = \"encryption_key\"; System.out.println(encryptionKey); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "import android.os.Build; public class RootCheck { public static boolean isRooted() { return Build.TAGS != null && Build.TAGS.contains(\"test-keys\"); } }",
        "label": "rooted_device_access"
    },
    {
        "code": "import java.io.File; public class RootAccess { public static boolean isDeviceRooted() { return new File(\"/system/app/Superuser.apk\").exists(); } }",
        "label": "rooted_device_access"
    },
    {
        "code": "import java.io.File; public class RootedDevice { public static boolean isRooted() { String[] paths = { \"/sbin/su\", \"/system/bin/su\", \"/system/xbin/su\" }; for (String path : paths) { if (new File(path).exists()) { return true; } } return false; } }",
        "label": "rooted_device_access"
    },
    {
        "code": "import android.os.Build; public class RootDetection { public static boolean isRooted() { return Build.TAGS != null && Build.TAGS.contains(\"test-keys\"); } }",
        "label": "rooted_device_access"
    },
    {
        "code": "import java.io.File; public class CheckRoot { public static boolean isRooted() { return new File(\"/system/app/Superuser.apk\").exists(); } }",
        "label": "rooted_device_access"
    },
    {
        "code": "public class RootDetectionExample { public static boolean isRooted() { return new File(\"/system/xbin/su\").exists(); } }",
        "label": "rooted_device_access"
    },
    {
        "code": "class HardcodedCredentials extends StatelessWidget { @override Widget build(BuildContext context) { final String username = 'admin'; final String password = 'password123'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { authenticate(username, password); }, child: Text('Authenticate'), ), ), ); } void authenticate(String username, String password) { if (username == 'admin' && password == 'password123') { print('Authentication successful.'); } else { print('Authentication failed.'); } } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "class HardcodedAPIKey extends StatelessWidget { @override Widget build(BuildContext context) { final String apiKey = 'API_KEY_123456'; return Scaffold( body: Center( child: Text('API Key: $apiKey'), ), ); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "class HardcodedSecrets extends StatelessWidget { @override Widget build(BuildContext context) { final String dbPassword = 'db_secret_pass'; return Scaffold( body: Center( child: Text('DB Password: $dbPassword'), ), ); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "class HardcodedFTP extends StatelessWidget { @override Widget build(BuildContext context) { final String ftpUsername = 'ftp_user'; final String ftpPassword = 'ftp_password'; return Scaffold( body: Center( child: Text('FTP: $ftpUsername:$ftpPassword'), ), ); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "class HardcodedKey extends StatelessWidget { @override Widget build(BuildContext context) { final String secretKey = 'supersecretkey'; return Scaffold( body: Center( child: Text('Secret Key: $secretKey'), ), ); } }",
        "label": "hardcoded_credentials"
    },
    {
        "code": "class InsecureDataStorage extends StatelessWidget { @override Widget build(BuildContext context) { final String sensitiveData = 'Sensitive Information'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { saveData(sensitiveData); }, child: Text('Save Data'), ), ), ); } void saveData(String data) { // Simulating saving data to a file } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "class SaveData extends StatelessWidget { @override Widget build(BuildContext context) { final String secretData = 'top_secret_data'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { saveToFile(secretData); }, child: Text('Save Secret Data'), ), ), ); } void saveToFile(String data) { // Simulating saving data to a file } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "class InsecureStorage extends StatelessWidget { @override Widget build(BuildContext context) { final String confidentialData = 'confidential_info'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { saveConfidentialData(confidentialData); }, child: Text('Save Confidential Data'), ), ), ); } void saveConfidentialData(String data) { // Simulating saving data to a file } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "class SensitiveInfoStorage extends StatelessWidget { @override Widget build(BuildContext context) { final String sensitiveInfo = 'SensitiveUserInfo'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { saveSensitiveInfo(sensitiveInfo); }, child: Text('Save Sensitive Info'), ), ), ); } void saveSensitiveInfo(String data) { // Simulating saving data to a file } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "class InsecureFile extends StatelessWidget { @override Widget build(BuildContext context) { final String data = 'Sensitive data logged'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { logSensitiveData(data); }, child: Text('Log Sensitive Data'), ), ), ); } void logSensitiveData(String data) { // Simulating logging sensitive data to a file } }",
        "label": "insecure_data_storage"
    },
    {
        "code": "class SQLInjectionExample extends StatelessWidget { @override Widget build(BuildContext context) { final String userInput = '1 OR 1=1'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { executeQuery(userInput); }, child: Text('Execute Query'), ), ), ); } void executeQuery(String userInput) { // Simulating SQL query execution } }",
        "label": "sql_injection"
    },
    {
        "code": "class SQLInjectionDemo extends StatelessWidget { @override Widget build(BuildContext context) { final String id = 'some_id'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { performQuery(id); }, child: Text('Perform Query'), ), ), ); } void performQuery(String id) { // Simulating SQL query execution } }",
        "label": "sql_injection"
    },
    {
        "code": "class SQLInjectionTest extends StatelessWidget { @override Widget build(BuildContext context) { final String input = 'malicious_input'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { queryDatabase(input); }, child: Text('Query Database'), ), ), ); } void queryDatabase(String input) { // Simulating SQL query execution } }",
        "label": "sql_injection"
    },
    {
        "code": "class SQLInjectionRisk extends StatelessWidget { @override Widget build(BuildContext context) { final String userInput = 'user_input'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { queryDatabase(userInput); }, child: Text('Query Database'), ), ), ); } void queryDatabase(String input) { // Simulating SQL query execution } }",
        "label": "sql_injection"
    },
    {
        "code": "class SQLQueryInjection extends StatelessWidget { @override Widget build(BuildContext context) { final String id = 'test_id'; return Scaffold( body: Center( child: ElevatedButton( onPressed: () { executeSQLQuery(id); }, child: Text('Execute SQL Query'), ), ), ); } void executeSQLQuery(String id) { // Simulating SQL query execution } }",
        "label": "sql_injection"
    },
    {
        "code": "class InsecureRandom extends StatelessWidget { @override Widget build(BuildContext context) { final random = Random(); final int randomNumber = random.nextInt(1000); return Scaffold( body: Center( child: Text('Random number: $randomNumber'), ), ); } }",
        "label": "insecure_random"
    },
    {
        "code": "class UnsecureRandomNumberGenerator extends StatelessWidget { @override Widget build(BuildContext context) { final rand = Random(); final int number = rand.nextInt(); return Scaffold( body: Center( child: Text('Random number: $number'), ), ); } }",
        "label": "insecure_random"
    },
    {
        "code": "class UnpredictableRandom extends StatelessWidget { @override Widget build(BuildContext context) { final random = Random(); final double value = random.nextDouble(); return Scaffold( body: Center( child: Text('Random value: $value'), ), ); } }",
        "label": "insecure_random"
    },
    {
        "code": "class WeakRandomGeneration extends StatelessWidget { @override Widget build(BuildContext context) { final rand = Random(); final int value = rand.nextInt(100); return Scaffold( body: Center( child: Text('Generated number: $value'), ), ); } }",
        "label": "insecure_random"
    },
    {
        "code": "class RandomDemo extends StatelessWidget { @override Widget build(BuildContext context) { final random = Random(); final longNumber = random.nextLong(); return Scaffold( body: Center( child: Text('Unsecure random number: $longNumber'), ), ); } }",
        "label": "insecure_random"
    },
    {
        "code": "class InsecureFilePermissions extends StatelessWidget { @override Widget build(BuildContext context) { final file = File('insecure_file.txt'); return Scaffold( body: Center( child: ElevatedButton( onPressed: () { setPermissions(file); }, child: Text('Set File Permissions'), ), ), ); } void setPermissions(File file) { // Simulating setting file permissions } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "class UnsafeFilePermissions extends StatelessWidget { @override Widget build(BuildContext context) { final file = File('unsafe_file.txt'); return Scaffold( body: Center( child: ElevatedButton( onPressed: () { setFilePermissions(file); }, child: Text('Set File Permissions'), ), ), ); } void setFilePermissions(File file) { // Simulating setting file permissions } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "class IncorrectFilePermissions extends StatelessWidget { @override Widget build(BuildContext context) { final file = File('incorrect_permissions.txt'); return Scaffold( body: Center( child: ElevatedButton( onPressed: () { modifyPermissions(file); }, child: Text('Modify File Permissions'), ), ), ); } void modifyPermissions(File file) { // Simulating modifying file permissions } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "class UnsecureFilePermissions extends StatelessWidget { @override Widget build(BuildContext context) { final file = File('unsecure_file.txt'); return Scaffold( body: Center( child: ElevatedButton( onPressed: () { adjustPermissions(file); }, child: Text('Adjust File Permissions'), ), ), ); } void adjustPermissions(File file) { // Simulating adjusting file permissions } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "class RiskyFilePermissions extends StatelessWidget { @override Widget build(BuildContext context) { final file = File('risky_file.txt'); return Scaffold( body: Center( child: ElevatedButton( onPressed: () { updatePermissions(file); }, child: Text('Update File Permissions'), ), ), ); } void updatePermissions(File file) { // Simulating updating file permissions } }",
        "label": "insecure_file_permissions"
    },
    {
        "code": "class MemoryLeakExample extends StatefulWidget { @override _MemoryLeakExampleState createState() => _MemoryLeakExampleState(); } class _MemoryLeakExampleState extends State<MemoryLeakExample> { List<String> _data = []; @override void initState() { super.initState(); fetchData(); } void fetchData() { // Simulating fetching large amounts of data _data.addAll(List.generate(1000000, (index) => 'Data $index')); } @override Widget build(BuildContext context) { return Scaffold( body: Center( child: Text('Data Count: ${_data.length}'), ), ); } }",
        "label": "memory_leaks"
    },
    {
        "code": "class MemoryLeak extends StatefulWidget { @override _MemoryLeakState createState() => _MemoryLeakState(); } class _MemoryLeakState extends State<MemoryLeak> { List<int> numbers = []; @override void initState() { super.initState(); createLargeList(); } void createLargeList() { // Simulating creating a large list numbers.addAll(List.generate(1000000, (index) => index)); } @override Widget build(BuildContext context) { return Scaffold( body: Center( child: Text('Numbers Count: ${numbers.length}'), ), ); } }",
        "label": "memory_leaks"
    },
    {
        "code": "class PotentialMemoryLeak extends StatefulWidget { @override _PotentialMemoryLeakState createState() => _PotentialMemoryLeakState(); } class _PotentialMemoryLeakState extends State<PotentialMemoryLeak> { List<String> items = []; @override void initState() { super.initState(); loadItems(); } void loadItems() { // Simulating loading items items.addAll(List.generate(1000000, (index) => 'Item $index')); } @override Widget build(BuildContext context) { return Scaffold( body: Center( child: Text('Items Count: ${items.length}'), ), ); } }",
        "label": "memory_leaks"
    },
    {
        "code": "class LeakDemo extends StatefulWidget { @override _LeakDemoState createState() => _LeakDemoState(); } class _LeakDemoState extends State<LeakDemo> { List<String> list = []; @override void initState() { super.initState(); generateLargeData(); } void generateLargeData() { // Simulating large data generation list.addAll(List.generate(1000000, (index) => 'Data $index')); } @override Widget build(BuildContext context) { return Scaffold( body: Center( child: Text('List Size: ${list.length}'), ), ); } }",
        "label": "memory_leaks"
    },
    {
        "code": "class LeakTest extends StatefulWidget { @override _LeakTestState createState() => _LeakTestState(); } class _LeakTestState extends State<LeakTest> { List<String> largeData = []; @override void initState() { super.initState(); allocateMemory(); } void allocateMemory() { // Simulating memory allocation largeData.addAll(List.generate(1000000, (index) => 'Data $index')); } @override Widget build(BuildContext context) { return Scaffold( body: Center( child: Text('Data Length: ${largeData.length}'), ), ); } }",
        "label": "memory_leaks"
    },
    {
        "code": "class DataObfuscation extends StatelessWidget { @override Widget build(BuildContext context) { final String sensitiveData = 'Sensitive Information'; return Scaffold( body: Center( child: Text('Data: $sensitiveData'), ), ); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "class SensitiveDataDisplay extends StatelessWidget { @override Widget build(BuildContext context) { final String data = 'Sensitive Data'; return Scaffold( body: Center( child: Text('Display Data: $data'), ), ); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "class ExposedData extends StatelessWidget { @override Widget build(BuildContext context) { final String userData = 'User data'; return Scaffold( body: Center( child: Text('User Data: $userData'), ), ); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "class PlainData extends StatelessWidget { @override Widget build(BuildContext context) { final String unencryptedData = 'Unencrypted Data'; return Scaffold( body: Center( child: Text('Unencrypted Data: $unencryptedData'), ), ); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "class UnmaskedData extends StatelessWidget { @override Widget build(BuildContext context) { final String dataToShow = 'Unmasked Data'; return Scaffold( body: Center( child: Text('Data: $dataToShow'), ), ); } }",
        "label": "lack_of_data_obfuscation"
    },
    {
        "code": "class NoHashing extends StatelessWidget { @override Widget build(BuildContext context) { final String password = 'password123'; return Scaffold( body: Center( child: Text('Password: $password'), ), ); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "class UnhashedPassword extends StatelessWidget { @override Widget build(BuildContext context) { final String password = 'my_password'; return Scaffold( body: Center( child: Text('Password: $password'), ), ); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "class NoHashingExample extends StatelessWidget { @override Widget build(BuildContext context) { final String sensitiveData = 'sensitive_info'; return Scaffold( body: Center( child: Text('Sensitive Data: $sensitiveData'), ), ); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "class PlainPassword extends StatelessWidget { @override Widget build(BuildContext context) { final String plainPassword = 'plain_password'; return Scaffold( body: Center( child: Text('Password: $plainPassword'), ), ); } }",
        "label": "lack_of_hashing"
    },
    {
        "code": "class DataWithoutHashing extends StatelessWidget { @override Widget build(BuildContext context) { final String confidentialData = 'confidential'; return Scaffold( body: Center( child: Text('Confidential Data: $confidentialData'), ), ); } }",
        "label": "lack_of_hashing"
    }
]
