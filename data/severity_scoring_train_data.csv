code,severity
"import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.SQLException; public class SQLInjectionExample { public static void main(String[] args) { String userInput = ""1 OR 1=1""; try { Connection connection = DriverManager.getConnection(""jdbc:your_database_url"", ""username"", ""password""); String query = ""SELECT * FROM users WHERE id = "" + userInput; PreparedStatement statement = connection.prepareStatement(query); statement.executeQuery(); } catch (SQLException e) { e.printStackTrace(); } } }",High
import java.util.ArrayList; import java.util.List; public class InsecureDataStorageExample { private List<String> sensitiveData = new ArrayList<>(); public void addData(String data) { sensitiveData.add(data); } public List<String> getData() { return sensitiveData; } },Medium
"public class HardcodedCredentials { public static void main(String[] args) { String username = ""admin""; String password = ""password123""; System.out.println(""Login as: "" + username); } }",High
"import java.util.Random; public class InsecureRandomExample { public static void main(String[] args) { Random random = new Random(); int insecureRandom = random.nextInt(); System.out.println(""Random number: "" + insecureRandom); } }",Medium
"import java.io.File; public class InsecureFilePermissions { public static void main(String[] args) { File file = new File(""sensitive_data.txt""); file.setReadable(true, false); file.setWritable(true, false); } }",High
"import java.util.concurrent.ThreadLocalRandom; public class RandomNumberGenerator { public static void main(String[] args) { int randomNumber = ThreadLocalRandom.current().nextInt(0, 100); System.out.println(""Random number: "" + randomNumber); } }",Low
"import java.security.SecureRandom; public class SecureRandomExample { public static void main(String[] args) { SecureRandom secureRandom = new SecureRandom(); int secureNumber = secureRandom.nextInt(); System.out.println(""Secure random number: "" + secureNumber); } }",Low
"import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class SecureSQL { public static void main(String[] args) { try { Connection connection = DriverManager.getConnection(""jdbc:your_database_url"", ""username"", ""password""); String query = ""SELECT * FROM users WHERE id = ?""; PreparedStatement stmt = connection.prepareStatement(query); stmt.setInt(1, 1); stmt.executeQuery(); } catch (SQLException e) { e.printStackTrace(); } } }",Low
import 'package:http/http.dart' as http; void fetchData(String userInput) async { var query = 'SELECT * FROM users WHERE id = ' + userInput; var response = await http.get(Uri.parse('http://example.com/data?query=$query')); print(response.body); },High
"import 'dart:io'; class InsecureDataStorage { List<String> sensitiveData = []; void addData(String data) { sensitiveData.add(data); File('data.txt').writeAsStringSync(sensitiveData.join(', ')); } List<String> getData() { return sensitiveData; } }",Medium
class HardcodedCredentials { void login() { String username = 'admin'; String password = 'password123'; print('Login with username: $username and password: $password'); } },High
import 'dart:math'; class InsecureRandomExample { void generateRandomNumber() { var random = Random(); int insecureRandom = random.nextInt(100); print('Random number: $insecureRandom'); } },Medium
import 'dart:io'; class InsecureFilePermissions { void setPermissions() { var file = File('sensitive_data.txt'); file.writeAsStringSync('Sensitive data'); file.setLastAccessedSync(DateTime.now()); } },High
import 'dart:math'; class SecureRandomExample { void generateRandomNumber() { var secureRandom = Random.secure(); int secureRandomNumber = secureRandom.nextInt(100); print('Secure random number: $secureRandomNumber'); } },Low
import 'package:crypto/crypto.dart'; class SecureHashExample { void generateHash(String input) { var bytes = utf8.encode(input); var digest = sha256.convert(bytes); print('Hash: \$digest'); } },Low
import 'package:http/http.dart' as http; void fetchSecureData() async { var response = await http.get(Uri.parse('http://example.com/data?userId=1')); print(response.body); },Low
