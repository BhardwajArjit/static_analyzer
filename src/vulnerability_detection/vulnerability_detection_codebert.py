import json
from transformers import RobertaTokenizer, RobertaForSequenceClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
from datasets import Dataset, DatasetDict
import warnings

# Suppress specific warnings
warnings.filterwarnings("ignore", category=FutureWarning, message=".*clean_up_tokenization_spaces.*")
warnings.filterwarnings("ignore", category=FutureWarning, message=".*evaluation_strategy.*")

# Load dataset
with open('../../data/java_vulnerabilities.json') as f:
    data = json.load(f)

# Prepare the dataset
texts = [item['code'] for item in data]
labels = [item['label'] for item in data]

# Encode labels
label_set = list(set(labels))
label_to_id = {label: idx for idx, label in enumerate(label_set)}
id_to_label = {idx: label for label, idx in label_to_id.items()}
encoded_labels = [label_to_id[label] for label in labels]

# Split the data
train_texts, val_texts, train_labels, val_labels = train_test_split(texts, encoded_labels, test_size=0.2)

# Convert to Hugging Face datasets
train_data = {'text': train_texts, 'label': train_labels}
val_data = {'text': val_texts, 'label': val_labels}

train_dataset = Dataset.from_dict(train_data)
val_dataset = Dataset.from_dict(val_data)

dataset = DatasetDict({
    'train': train_dataset,
    'validation': val_dataset
})

# Load CodeBERT
tokenizer = RobertaTokenizer.from_pretrained("microsoft/codebert-base")
model = RobertaForSequenceClassification.from_pretrained("microsoft/codebert-base", num_labels=len(label_set))

# Tokenize the data
def tokenize_function(examples):
    return tokenizer(examples['text'], padding='max_length', truncation=True)

train_dataset = dataset['train'].map(tokenize_function, batched=True)
val_dataset = dataset['validation'].map(tokenize_function, batched=True)

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=2,
    per_device_eval_batch_size=2,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
)

# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
)

# Train the model
trainer.train()

# Save the model
model.save_pretrained('../../models/vulnerability_detection_codebert')
tokenizer.save_pretrained('../../models/vulnerability_detection_codebert')
